標準入力
・var = input() で取得
・取得するのは文字列
・一回の取得で一行まで
・複数行取得したいときはforする
・input()で複数行読むときは一回呼び出す毎に1行進む

改行ごとの分割 text.splitlines()

スペース/タブ/改行での分割 text.split()

配列処理
・配列要素の合計 sum(array)
・配列要素それぞれに処理を施す array2 = [fucntion(i) for i array]

numpyは配列をmatlabのように扱える
[:,idx]などができる

np.zeros((row,col),dtype = int)
np.full((row,col),10)

配列から最小要素のindexを抜くには
・numpy
np.argmin(array)

行列から最小要素のindedを抜く
最小値を求める np.min(array)
argwhere

配列内の要素の種類を数える
・List
collections.Counter が便利
my_list = ['a', 'b', 'b', 'c', 'a', 'a']
count_dict = Counter(my_list)
print(count_dict)  # 出力: Counter({'a': 3, 'b': 2, 'c': 1})
・numpy
my_array = np.array(['a', 'b', 'b', 'c', 'a', 'a'])
unique_elements, counts = np.unique(my_array, return_counts=True)
print(unique_elements)  # 出力: ['a' 'b' 'c']
print(counts)  # 出力: [3 2 1]

・配列内の特定の要素を数える
np.count_nonzero(array == target)


配列の一致を見る
順序を無視: set(list1) == set(list2)
順序を考慮: list1 == list2
順序を無視するが重複は考慮: Counter(list1) == Counter(list2)
from collections import Counter

行列内から指定した要素を探しそのindexを答える
indices = np.argwhere(matrix == target)

対角成分を得る
main_diag = np.diag(matrix)
anti_diag = np.diag(np.fliply(matrix))

全ての要素が0かどうかの確認
np.all(matrix == 0)

配列のサイズ
np.size
形
np.shape


反復処理ライブラリ (itertools)
from itertools import permutations
data = [1,2,3]

1.permutations : 順列
[(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]
2.combinations : 組み合わせ
[(1, 2), (1, 3), (2, 3)]
3.combinations_with_replacement : 重複ありの組み合わせ
[(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]
4.count : 無限カウントアップ
count(10,2)
出力: 10, 12, 14, 16, 18, 20...
5.cycle : 要素の無限繰り返し
cycle(array)
出力: A, B, C, A, B....
6.repet : 繰り返し
repeat(10,3)
出力: [10, 10, 10]
7.groupby : グループ化
data = [1, 1, 2, 2, 3, 3, 3, 2]
groupby(data)
# 出力: [(1, [1, 1]), (2, [2, 2]), (3, [3, 3, 3]), (2, [2])]
8.条件を満たさない要素をフィルタリング
data = [1, 2, 3, 4, 5]
filterfalse(lambda x: x % 2 == 0, data)
# 出力: [1, 3, 5]（偶数を除外）
9.chain : イテラブル連結
chain(array1,array2)
10.product : デカルト積
data1 = [1, 2]
data2 = ['A', 'B']
product(data1, data2)
出力: [(1, 'A'), (1, 'B'), (2, 'A'), (2, 'B')]


ビット演算子
x | y    x と y のビット単位 論理和
x ^ y    x と y のビット単位 排他的論理和
x & y    x と y のビット単位 論理積
x << n   x の n ビット左シフト
x >> n   x の n ビット右シフト
~x       x のビット反転

二分探索 (bisect)
・ソート済みリストに対して二分探索を行う
bisect.bisect_left
指定した値を挿入できる最初の位置を見つけます。
bisect.bisect_right または bisect.bisect
指定した値を挿入できる最後の位置を見つけます。
bisect.insort_left
指定した値を挿入できる最初の位置に挿入し、リストをソート状態のまま維持します。
bisect.insort_right または bisect.insort
指定した値を挿入できる最後の位置に挿入します。

set()
・{}で生成
・重複する値は無視され、一意な値のみが残る。順序は保持されない
・異なる型も要素として持てる
・リストのようなミュータブル(更新可能)な要素は登録不可
・空集合はset()
・要素追加はadd()
・要素削除
    discard() : 要素削除、存在しなくても実行可能
    remove() : 要素削除、存在しないとエラー
    pop() : 要素を削除してその値を返す
    clear() : 全ての要素を消して空集合にする
演算子
s1 = {0, 1, 2}
s2 = {1, 2, 3}
・和集合 : union()
(s1 | s2) # {0, 1, 2, 3}
    累積 : s1 |= s2 
・積集合 : intersection()
(s1 & s2) # {1, 2}
    累積 : s1 $= s2
・差集合 : difference()
(s1 - s2) # {0}
    累積 : s1 -= s2
・対象差集合 symmetric_defference()
(s1 ^ s2) # {0, 3}
    累積 : s1 ^= s2
・部分集合判定 : issubset()
(s1 <= s2) # True
s1.issubset(s2) # True
・上位集合判定 : issuperset()
(s2 >= s1) # True
s2.issuperset(s1) # True
・互いに素か判定 : isdisjoint()
s1.isdisjoint(s2) # False

N, Q = map(int, input().split())

文字列置き換え
str.replace('before','after')

合計
arr = np.array([
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15],
    [16, 17, 18, 19, 20],
    [21, 22, 23, 24, 25]
])
# 3列目（index=2）、2〜5行目（index=1〜4）の合計をとる
result = np.sum(arr[1:5, 2])


・list(iterable)
iterableオブジェクトをリストに変換する
ex
s = "hello"
lst = list(s)
print(lst)  # ['h', 'e', 'l', 'l', 'o']

・zip(iterable,iterable)
iterableをまとめて同時にループ処理できる
a = [1, 2, 3]
b = ['a', 'b', 'c']
zipped = zip(a, b)
print(list(zipped))  # [(1, 'a'), (2, 'b'), (3, 'c')]


