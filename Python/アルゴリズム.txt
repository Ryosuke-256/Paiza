グラフ
隣接リストの作り方
graph = {node:[(neighbor,weight)]}
graph = {
    0: [1, 2],
    1: [3, 4],
    2: [5],
    3: [],
    4: [6],
    5: [],
    6: []
}


深さ優先探索 DFS
・一つの頂点をたどり続ける
・スタック (行きがけ)
def dfs_stack(graph,start):
    visited = set()
    stack = [start]
    while stack:
        node = stack.pop()
        if node not in visited:
            visited.add(node)
            print(node)
            stack.extend(reversed(graph[node]))
(行きがけ、帰りがけmemo)
def dfs_stack(graph,start):
    visited = set()
    stack = [(start,False)]
    order = []
    post_order = []

    while stack:
        node,visited_flag = stack.pop()
        order.append(node)
        if visited_flag:
            post_order.append(node)
        if node not in visited:
            visited.add(node)
            stack.append((node,True))
            order.append(node)

            for neighbor in reversed(graph[node]):
                if neighbor not in visited:
                    stack.append((neighbor,False))
    return order,post_order



幅優先探索 BFS
・ステップ数が同じ頂点を全て探索する
・キュー





