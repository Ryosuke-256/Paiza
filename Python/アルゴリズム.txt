グラフ
隣接リストの作り方
graph = {node:[(neighbor,weight)]}
graph = {
    0: [1, 2],
    1: [3, 4],
    2: [5],
    3: [],
    4: [6],
    5: [],
    6: []
}


深さ優先探索 DFS
・一つの頂点をたどり続ける
・スタック (行きがけ)
def dfs_stack(graph,start):
    visited = set()
    stack = [start]
    while stack:
        node = stack.pop()
        if node not in visited:
            visited.add(node)
            print(node)
            stack.extend(reversed(graph[node]))
(行きがけ、帰りがけmemo)
def dfs_stack(graph,start):
    visited = set()
    stack = [(start,False)]
    order = []
    post_order = []

    while stack:
        node,visited_flag = stack.pop()
        order.append(node)
        if visited_flag:
            post_order.append(node)
        if node not in visited:
            visited.add(node)
            stack.append((node,True))
            order.append(node)

            for neighbor in reversed(graph[node]):
                if neighbor not in visited:
                    stack.append((neighbor,False))
    return order,post_order



幅優先探索 BFS
・ステップ数が同じ頂点を全て探索する
・キュー

table得点最大化経路探索問題
考え方
・DFS+DP
・再帰関数 dfs:dfs(x,y)は位置(x,y)からスタートした場合の最大得点を返す。計算済みの結果はlru_cacheに保存
・最後の行(葉の方)からスタートして結果をキャッシュしながら最初の行(根の方)に向かう
・キャッシュし重複計算を防ぎ、高速化する
1.アプローチ分解
・行数、列数が最大1000で全体で10^6になるので全てのルートを計算すると3^1000の計算量が必要で非効率的
2.ルールシミュレート
・(x,y)の板を倒した時次の倒れる板は
(x-1,y),(x-1,y-1),(x-1,y+1)
3.最大値を効率的に計算
・動的計画法を使うと効率的に解決できる
・dp[x][y]:(x,y)の位置に到達したときの最大得点
・dp[x][y] = scores[x][y]+max(dp[x+1][y],dp[x+1][y-1],dp[x+1][y+1])
・初期値は最奥の行(x = H-1)
4.DFS + Chche
from functools import lru_cache
lru_cache : 計算済みの再帰結果をキャッシュして高速化する


・ユークリッド互除法
・エラトステネスのふるい

サーチアルゴリズム

ソートアルゴリズム
・バブルソート
・選択ソート
・挿入ソート
・バケットソート
・基数ソート
・マージソート
・ヒープソート
・


